'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _graphqlTools = require('graphql-tools');

var _resolvers = require('./resolvers.js');

var typeDefs = '\n\ntype Query {\n  # Queries for both profiles and applications should originate here. Otherwise, don\'t use it.\n  user(token: String!): User,\n  \n  # Queries the user\'s profile.\n  profile(token: String!): Profile,\n  \n  # Queries the user\'s application\n  application(token: String!): Application,\n  \n  # Things like regex, dates, and field options will go here.\n  CONSTANTS: Constants,\n}\n\ntype Mutation {\n\n    # Creates a new user in the database. Returns a token.\n    createUser(email: String!, password: String!): String,\n    \n    # Logs in an existing user. Returns a token. To logout, simply purge the authentication key from the client.\n    login(email: String!, password: String!): String,\n    \n    # Sends an email to the user with a token to reset their password. Returns True if successful.\n    send_reset(email: String!): String,\n    \n    # Resets the user\'s password based on the token from the reset password email. Returns True if successful.\n    reset_password(new_password: String!, token: String!): Boolean,\n    \n    set_user_state(user_state: String!, token: String!): String,\n    \n    # Updates or creates the user\'s profile. Returns that profile.\n    updateProfile(\n        first_name: String,\n        last_name: String,\n        school: String,\n        grade: Int,\n        phone_number: String,\n        gender: String,\n        race_ethnicity: String\n        dietary_restrictions: String,\n        shirt_size: String,\n        github_link: String,\n        linkedin_profile: String,\n        devpost_profile: String,\n        personal_website: String,\n        is_bgc: Boolean,\n        mlh_agreement: Boolean,\n        mlh_data_agreement: Boolean,\n        token: String!\n    ): Boolean\n    \n    # Updates or creates the user\'s application. Returns that application. Cannot be done until Profile is_complete.\n    updateApplication (\n        cool_project: String,\n        last_summer: String,\n        anything_else: String,\n        liability_form: String,\n        photo_form: String,\n        coming_yes: Boolean,\n        coming_maybe: Boolean,\n        coming_no: Boolean,\n        submitted: Boolean,\n        token: String!\n    ): Boolean\n}\n\n# The base type for all users of the system. Usually not necessary to query directly.\ntype User {\n    # The user\'s email address.\n    email: String,\n    # The user\'s profile.\n    profile: Profile\n    # The user\'s application\n    application: Application,\n    # The user\'s current state (application or profile)\n    user_state: String\n}\n\n# The user\'s profile.\ntype Profile {\n    first_name: String,\n    last_name: String,\n    # See SCHOOLS for a list of suggestions. New values should also be allowed.\n    school: String,\n    # See MAX_GRADE for the maximum grade allowed (12).\n    grade: Int,\n    # Must satisfy the PHONE_REGEX.\n    phone_number: String,\n    # See DIETARY_RESTRICTIONS for a list of suggestions. New values should also be allowed. Multiple values should be\n    # allowed.\n    dietary_restrictions: String,\n    # Must be one of the options from SHIRT_OPTIONS\n    shirt_size: String,\n    github_link: String,\n    linkedin_profile: String,\n    devpost_profile: String,\n    personal_website: String,\n    # Whether the user is from the Boys and Girls Club.\n    is_bgc: Boolean,\n    # Whether the user agreed to the MLH checkbox.\n    mlh_agreement: Boolean,\n    mlh_data_agreement: Boolean,\n    gender: String,\n    race_ethnicity: String,\n    # Whether the user goes to Menlo. Precalculated on the server so you don\'t have to. \n    is_menlo: Boolean,\n    # Whether the profile has all fields in REQUIRED_PROFILE_FIELDS filled out.\n    is_complete: Boolean,\n}\n\n# The user\'s application. Cannot exist until profile is_complete.\ntype Application {\n    # A text field, only shown to non-Menlo students. I\'m still thinking of the actual questions.\n    cool_project: String,\n    # A text field, only shown to non-Menlo students. I\'m still thinking of the actual questions.\n    last_summer: String,\n    # A text field, shown to everyone.\n    anything_else: String,\n    # A url pointing to filestack.\n    liability_form: String,\n    # A url pointing to filestack.\n    photo_form: String,\n    is_admitted: Boolean,\n    is_waitlisted: Boolean,\n    is_rejected: Boolean,\n    is_ineligible: Boolean,\n    coming_yes: Boolean,\n    coming_maybe: Boolean,\n    coming_no: Boolean,\n    submitted: Boolean\n}\n\ntype Constants {\n    # The fields required to be filled out for a profile to be complete.\n    REQUIRED_PROFILE_FIELDS: [String],\n    # The maximum grade for any student attending.\n    MAX_GRADE: Int,\n    # A regex to verify phone numbers.\n    PHONE_REGEX: String,\n    # A regex to identify emails.\n    EMAIL_REGEX: String,\n    # Options for gender. \n    GENDER_OPTIONS: [String],\n    # Options for T shirt size.\n    SHIRT_OPTIONS: [String],\n    # Suggestions for schools.\n    SCHOOLS: [String],\n    # Suggestions for dietary restrictions\n    DIETARY_RESTRICTIONS: [String],\n    MENLO_FORM_URL: String,\n    NON_MENLO_FORM_URL: String,\n    PHOTO_FORM_URL: String,\n    APPLICATIONS_CLOSE: String,\n    DISABLED_AFTER_APPLICATIONS_CLOSE: [String],\n    RACE_ETHNICITY_OPTIONS: [String]\n}\n\n';

var schema = (0, _graphqlTools.makeExecutableSchema)({ typeDefs: typeDefs, resolvers: _resolvers.resolvers });

exports.default = schema;